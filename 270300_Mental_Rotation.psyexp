<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2021.2.3">
  <Settings>
    <Param name="Audio latency priority" updates="None" val="use prefs" valType="str"/>
    <Param name="Audio lib" updates="None" val="use prefs" valType="str"/>
    <Param name="Completed URL" updates="None" val="" valType="str"/>
    <Param name="Data file delimiter" updates="None" val="auto" valType="str"/>
    <Param name="Data filename" updates="None" val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code"/>
    <Param name="Enable Escape" updates="None" val="True" valType="bool"/>
    <Param name="Experiment info" updates="None" val="{'participant': '', 'session': '001', 'group': ''}" valType="code"/>
    <Param name="Force stereo" updates="None" val="True" valType="bool"/>
    <Param name="Full-screen window" updates="None" val="True" valType="bool"/>
    <Param name="HTML path" updates="None" val="" valType="str"/>
    <Param name="Incomplete URL" updates="None" val="" valType="str"/>
    <Param name="Monitor" updates="None" val="testMonitor" valType="str"/>
    <Param name="Resources" updates="None" val="[]" valType="list"/>
    <Param name="Save csv file" updates="None" val="False" valType="bool"/>
    <Param name="Save excel file" updates="None" val="False" valType="bool"/>
    <Param name="Save hdf5 file" updates="None" val="False" valType="bool"/>
    <Param name="Save log file" updates="None" val="True" valType="bool"/>
    <Param name="Save psydat file" updates="None" val="True" valType="bool"/>
    <Param name="Save wide csv file" updates="None" val="True" valType="bool"/>
    <Param name="Screen" updates="None" val="2" valType="num"/>
    <Param name="Show info dlg" updates="None" val="True" valType="bool"/>
    <Param name="Show mouse" updates="None" val="False" valType="bool"/>
    <Param name="Units" updates="None" val="height" valType="str"/>
    <Param name="Use version" updates="None" val="" valType="str"/>
    <Param name="Window size (pixels)" updates="None" val="[1920, 1080]" valType="list"/>
    <Param name="blendMode" updates="None" val="avg" valType="str"/>
    <Param name="color" updates="None" val="black" valType="color"/>
    <Param name="colorSpace" updates="None" val="rgb" valType="str"/>
    <Param name="elAddress" updates="None" val="100.1.1.1" valType="str"/>
    <Param name="elDataFiltering" updates="None" val="FILTER_LEVEL_2" valType="str"/>
    <Param name="elLiveFiltering" updates="None" val="FILTER_LEVEL_OFF" valType="str"/>
    <Param name="elModel" updates="None" val="EYELINK 1000 DESKTOP" valType="str"/>
    <Param name="elPupilAlgorithm" updates="None" val="ELLIPSE_FIT" valType="str"/>
    <Param name="elPupilMeasure" updates="None" val="PUPIL_AREA" valType="str"/>
    <Param name="elSampleRate" updates="None" val="1000" valType="num"/>
    <Param name="elSimMode" updates="None" val="False" valType="bool"/>
    <Param name="elTrackEyes" updates="None" val="RIGHT_EYE" valType="str"/>
    <Param name="elTrackingMode" updates="None" val="PUPIL_CR_TRACKING" valType="str"/>
    <Param name="expName" updates="None" val="270300_Mental_Rotation" valType="str"/>
    <Param name="exportHTML" updates="None" val="on Sync" valType="str"/>
    <Param name="eyetracker" updates="None" val="None" valType="str"/>
    <Param name="gpAddress" updates="None" val="127.0.0.1" valType="str"/>
    <Param name="gpPort" updates="None" val="4242" valType="num"/>
    <Param name="logging level" updates="None" val="exp" valType="code"/>
    <Param name="mgBlink" updates="None" val="('MIDDLE_BUTTON',)" valType="list"/>
    <Param name="mgMove" updates="None" val="CONTINUOUS" valType="str"/>
    <Param name="mgSaccade" updates="None" val="0.5" valType="num"/>
    <Param name="tbLicenseFile" updates="None" val="" valType="str"/>
    <Param name="tbModel" updates="None" val="" valType="str"/>
    <Param name="tbSampleRate" updates="None" val="60" valType="num"/>
    <Param name="tbSerialNo" updates="None" val="" valType="str"/>
  </Settings>
  <Routines>
    <Routine name="instructions_2D">
      <ImageComponent name="instr_2D">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="Stimuli_2D\instructions\instructions.png" valType="file"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="" valType="str"/>
        <Param name="name" updates="None" val="instr_2D" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(584, 441)" valType="list"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="num"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
      </ImageComponent>
      <KeyboardComponent name="instr_2D_kb">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="list"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="instr_2D_kb" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="ITI_Fixation_2D">
      <CodeComponent name="fix_point_2D_code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="img_correct_path = ((&quot;Stimuli_2d/correct&quot; + img_index[trials_2D.thisN].toString()) + &quot;.png&quot;);&amp;#10;img_wrong_path = ((&quot;Stimuli_2d/wrong&quot; + img_index[trials_2D.thisN].toString()) + &quot;.png&quot;);&amp;#10;img_target_path = ((&quot;Stimuli_2d/target&quot; + img_index[trials_2D.thisN].toString()) + &quot;.png&quot;);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# Logging der Pfade der verwendeten Bilddateien&amp;#10;# Diese Variablen werden in die Experimental-csv-Daatei geschrieben und&amp;#10;# als Pfad für die image-Stimuli verwendet&amp;#10;img_correct_path = 'Stimuli_2d/correct' + str(img_index[trials_2D.thisN]) + '.png' # Pfad des korrekten 2D-Bildes&amp;#10;img_wrong_path = 'Stimuli_2d/wrong' + str(img_index[trials_2D.thisN]) + '.png' # Pfad des falschen 2D-Bildes&amp;#10;img_target_path = 'Stimuli_2d/target' + str(img_index[trials_2D.thisN]) + '.png' # Pfad des Target-Bildes" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="fix_point_2D_code" valType="code"/>
      </CodeComponent>
      <PolygonComponent name="fix_point_2D">
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="1" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="color"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="white" valType="color"/>
        <Param name="lineWidth" updates="constant" val="1" valType="num"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="fix_point_2D" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="None" val="circle" valType="str"/>
        <Param name="size" updates="constant" val="(5, 5)" valType="list"/>
        <Param name="startEstim" updates="None" val="0" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="1.0" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
        <Param name="vertices" updates="constant" val="" valType="list"/>
      </PolygonComponent>
      <StaticComponent name="fix_point_2D_ISI">
        <Param name="code" updates="None" val="" valType="code"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="1" valType="code"/>
        <Param name="name" updates="None" val="fix_point_2D_ISI" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="0" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="1" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="False" valType="bool"/>
      </StaticComponent>
    </Routine>
    <Routine name="trial_2D">
      <CodeComponent name="trial_2D_code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="# Importieren der relevanten / benötigten Libraries&amp;#10;import random # für Zugriff auf die random- und shuffle-Methode&amp;#10;&amp;#10;# Erstellen der Liste mit den Bild-Indices&amp;#10;# Da die Bilder von 1-15 durchnummeriert sind (z.B. correct1.png), wird eine Liste mit &amp;#10;# entsprechenden Integern angelegt&amp;#10;img_index = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]&amp;#10;&amp;#10;# Randomisierung der Liste mit den Bild-Indices&amp;#10;# wenn als Pfad zur Bilddatei $#Stimuli_2D/target' + str(img_index[trials.thisN]) + '.png'&amp;#10;# verwendet wird, erhält man eine zufällige Reihenfolge der Bilddateien,&amp;#10;# da die img_index-Liste vorher geshuffelt wurde&amp;#10;random.shuffle(img_index)" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="import * as random from 'random';&amp;#10;var img_index;&amp;#10;img_index = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];&amp;#10;random.shuffle(img_index);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="if ((random.random() &lt; 0.5)) {&amp;#10;    x_pos_correct = (- 250);&amp;#10;} else {&amp;#10;    x_pos_correct = 250;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# Festlegen der x-Position der Correct- und &amp;#10;# Wrong-Stimuli / Bilder&amp;#10;# x_pos_correct wird bei dem Bildstimulus&amp;#10;# img_correct, -x_pos_correct bei dem &amp;#10;# Bildstimulus img_wrong unter Position als x-Koordinate&amp;#10;# verwendet. Der Wert 250 ist arbiträr gewählt, die&amp;#10;# Anordnung der Stimuli ähnelt aber der in der &amp;#10;# Aufgabenstellung vorgegebenen Anordnung.&amp;#10;if random.random() &lt; 0.5:&amp;#10;    x_pos_correct = -250&amp;#10;else:&amp;#10;    x_pos_correct = 250" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="psychoJS.experiment.addData(&quot;x_pos_correct&quot;, x_pos_correct);&amp;#10;psychoJS.experiment.addData(&quot;x_pos_wrong&quot;, (- x_pos_correct));&amp;#10;psychoJS.experiment.addData(&quot;img_correct&quot;, img_correct_path);&amp;#10;psychoJS.experiment.addData(&quot;img_wrong&quot;, img_wrong_path);&amp;#10;psychoJS.experiment.addData(&quot;img_target&quot;, img_target_path);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="# Speichern der x-Koordinaten der Stimuli&amp;#10;# x_pos_correct = x-Position (pix) der img_correct-Stimuli&amp;#10;# x_pos_wrong = x-Position (pix) der img_wrong-Stimuli&amp;#10;thisExp.addData('x_pos_correct', x_pos_correct)&amp;#10;thisExp.addData('x_pos_wrong', -x_pos_correct)&amp;#10;&amp;#10;# Speichern der verwendeten Bilddateien&amp;#10;# (in den csv-Dateien kann man anhand der Zahlen&amp;#10;# der verwendeten Bilder sehen, dass die Stimuli&amp;#10;# randomisiert präsentiert werden)&amp;#10;thisExp.addData('img_correct', img_correct_path)&amp;#10;thisExp.addData('img_wrong', img_wrong_path)&amp;#10;thisExp.addData('img_target', img_target_path)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="trial_2D_code" valType="code"/>
      </CodeComponent>
      <MouseComponent name="trial_2D_mouse">
        <Param name="clickable" updates="constant" val="img_correct, img_wrong" valType="list"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="10" valType="code"/>
        <Param name="forceEndRoutineOnPress" updates="constant" val="valid click" valType="str"/>
        <Param name="name" updates="None" val="trial_2D_mouse" valType="code"/>
        <Param name="newClicksOnly" updates="constant" val="True" valType="bool"/>
        <Param name="saveMouseState" updates="None" val="on click" valType="str"/>
        <Param name="saveParamsClickable" updates="constant" val="name, pos" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="0" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="10" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="False" valType="bool"/>
        <Param name="timeRelativeTo" updates="constant" val="routine" valType="str"/>
      </MouseComponent>
      <ImageComponent name="img_correct">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="10" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set during: ITI_Fixation_2D.fix_point_2D_ISI" val="$img_correct_path" valType="file"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="" valType="str"/>
        <Param name="name" updates="None" val="img_correct" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="set every repeat" val="(x_pos_correct, -139)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(300, 278)" valType="list"/>
        <Param name="startEstim" updates="None" val="0" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="10" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="num"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
      </ImageComponent>
      <ImageComponent name="img_target">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="10" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set during: ITI_Fixation_2D.fix_point_2D_ISI" val="$img_target_path" valType="file"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="" valType="str"/>
        <Param name="name" updates="None" val="img_target" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 139)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(300, 278)" valType="list"/>
        <Param name="startEstim" updates="None" val="0" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="10" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="num"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
      </ImageComponent>
      <ImageComponent name="img_wrong">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="10" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set during: ITI_Fixation_2D.fix_point_2D_ISI" val="$img_wrong_path" valType="file"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="" valType="str"/>
        <Param name="name" updates="None" val="img_wrong" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="set every repeat" val="(-x_pos_correct, -139)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(300, 278)" valType="list"/>
        <Param name="startEstim" updates="None" val="0" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="10" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="num"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
      </ImageComponent>
    </Routine>
    <Routine name="instructions_3D">
      <TextComponent name="instr_3D">
        <Param name="color" updates="constant" val="white" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="num"/>
        <Param name="name" updates="None" val="instr_3D" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="0" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Die folgenden Figuren müssen verglichen werden. Überlappen die Figuren durch Drehen vollständig, dann drücken Sie die Pfeiltaste nach OBEN, wenn nicht, drücken Sie die Pfeiltaste nach UNTEN. &amp;#10;&amp;#10;Zum Fortfahren bitte LEERTASTE drücken." valType="str"/>
        <Param name="units" updates="None" val="norm" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="1.2" valType="num"/>
      </TextComponent>
      <KeyboardComponent name="instr_3D_kb">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="list"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="instr_3D_kb" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="0" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="ITI_Fixation_3D">
      <PolygonComponent name="fix_point_3D">
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="1" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="color"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="white" valType="color"/>
        <Param name="lineWidth" updates="constant" val="1" valType="num"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="fix_point_3D" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="None" val="circle" valType="str"/>
        <Param name="size" updates="constant" val="(5, 5)" valType="list"/>
        <Param name="startEstim" updates="None" val="0" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="1.0" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
        <Param name="vertices" updates="constant" val="" valType="list"/>
      </PolygonComponent>
      <StaticComponent name="fix_point_3D_ISI">
        <Param name="code" updates="None" val="" valType="code"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="1" valType="code"/>
        <Param name="name" updates="None" val="fix_point_3D_ISI" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="0" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="1" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="False" valType="bool"/>
      </StaticComponent>
    </Routine>
    <Routine name="trial_3D">
      <CodeComponent name="trial_3D_code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="## Laden der relevanten Libraries&amp;#10;import os       # für OS-spezifischen Separator&amp;#10;import sys      # um Pfad des aktuellen Python-Skriptes auszulesen&amp;#10;import glob     # zum Erstellen einer Liste mit allen Bildernamen&amp;#10;import re&amp;#10;&amp;#10;&amp;#10;# Custom Funktion für natural sorting&amp;#10;# gefunden unter: https://github.com/bdrung/snippets/blob/master/natural_sorted.py&amp;#10;# Grund für Verwendung: Wenn Pfade zu Bilddateien per glob ausgelesen werden, wird die Reihen-&amp;#10;# folge verändert (xx_0, xx_100, xx_150, xx_50), da die 5 höher als 0 oder 1 ist.&amp;#10;# Natural Sorting sortiert die Pfadnamen so, &quot;wie man es erwarten würde&quot;, d.h. so, als ob&amp;#10;# die Dateien xx_50 als xx_050 vorlägen.&amp;#10;def natural_sorted(iterable, key=None, reverse=False):&amp;#10;    &quot;&quot;&quot;Return a new naturally sorted list from the items in *iterable*.&amp;#10;&amp;#10;    The returned list is in natural sort order. The string is ordered&amp;#10;    lexicographically (using the Unicode code point number to order individual&amp;#10;    characters), except that multi-digit numbers are ordered as a single&amp;#10;    character.&amp;#10;&amp;#10;    Has two optional arguments which must be specified as keyword arguments.&amp;#10;&amp;#10;    *key* specifies a function of one argument that is used to extract a&amp;#10;    comparison key from each list element: ``key=str.lower``.  The default value&amp;#10;    is ``None`` (compare the elements directly).&amp;#10;&amp;#10;    *reverse* is a boolean value.  If set to ``True``, then the list elements are&amp;#10;    sorted as if each comparison were reversed.&amp;#10;&amp;#10;    The :func:`natural_sorted` function is guaranteed to be stable. A sort is&amp;#10;    stable if it guarantees not to change the relative order of elements that&amp;#10;    compare equal --- this is helpful for sorting in multiple passes (for&amp;#10;    example, sort by department, then by salary grade).&amp;#10;    &quot;&quot;&quot;&amp;#10;    prog = re.compile(r&quot;(\d+)&quot;)&amp;#10;&amp;#10;    def alphanum_key(element):&amp;#10;        &quot;&quot;&quot;Split given key in list of strings and digits&quot;&quot;&quot;&amp;#10;        return [int(c) if c.isdigit() else c for c in prog.split(key(element)&amp;#10;                if key else element)]&amp;#10;&amp;#10;    return sorted(iterable, key=alphanum_key, reverse=reverse)&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;## Einlesen der Bilder&amp;#10;''' &amp;#10;1. Pfad des Experimentes / aktuellen Python-Skriptes auslesen&amp;#10;Grund: wenn das Experiment auf anderen Rechnern ausgeführt wird,&amp;#10;       wäre ein Hardcoden des Pfades zum Experiment (z.B. der Pfad&amp;#10;       auf _meinem_ PC unklug, da es auf anderem PC zu Fehler käme)&amp;#10; &amp;#10; Erläuterung des Codes:&amp;#10;- sys.argv[0] ist der Name des Skriptes&amp;#10;- os.path.realpath(&lt;path&gt;) wandelt Argument in kanonischen Pfad (&quot;kürzester Pfad i.S.v. Stringlänge&quot;&amp;#10;    bzw. Pfad ohne symbolische Links, Abkürzungen wie /./../ um&quot;), sodass der Pfad eindeutig&amp;#10;    und unique ist -&gt; Output ist der kanonische Pfad der Scriptdatei&amp;#10;- os.path.dirname(&lt;path&gt;) gibt den Pfad der Inputdatei oder des Input-Directory (in Form einer Pfades &amp;#10;    übergeben) aus -&gt; Output ist der Pfad der Scriptdatei sys.argv[0]&amp;#10;'''&amp;#10;exp_root_path = os.path.dirname(os.path.realpath(sys.argv[0]))&amp;#10;&amp;#10;'''&amp;#10;2. Abhängig vom aktuellen Block (und somit auch Gruppenzugehörigkeit, da Blockreihenfolge für Gruppe A&amp;#10;und B unterschiedlich) wird das Verzeichnis der zu verwendenden Bilder dynamisch festgelegt.&amp;#10;&amp;#10;Erläuterungen:&amp;#10;    abhängig von der verwendeten Conditions-File steht in der Conditions-Spalte in Zeile 1 easy (Gruppe A) oder&amp;#10;    hard (Gruppe B). Für Gruppe A enthält ist Conditions[0] somit easy, für Gruppe B hard. Conditions[1] ist für&amp;#10;    Gruppe A hard, für Gruppe B easy.&amp;#10;    Zu Beginn des 3D-Taskes soll eine Liste mit den relativen Pfaden (relativ zu Root-Dir des Experimentes)&amp;#10;    zu ALLEN Bildern, die in der jeweiligen Gruppe verwendet werden, in der entsprechenden Reihenfolge &amp;#10;    erstellt werden. Durch einen Trialindex wird dann innerhalb der Image-Komponente der trial_3D-Routine auf&amp;#10;    das entsprechende Bild zugegriffen, wobei das Bild selbst während der Fixations geladen wird.&amp;#10;'''&amp;#10;&amp;#10;if expInfo['group'] == &quot;A&quot;:&amp;#10;    first_block = 'Stimuli_3D\\easy'&amp;#10;    second_block = 'Stimuli_3D\\hard'&amp;#10;elif expInfo['group'] == &quot;B&quot;:&amp;#10;    first_block = 'Stimuli_3D\\hard'&amp;#10;    second_block = 'Stimuli_3D\\easy'&amp;#10;&amp;#10;img_path_1 = exp_root_path + os.sep + first_block     # Pfad der Bilder, die zuerst erscheinen sollen (easy oder hard)&amp;#10;img_path_2 = exp_root_path + os.sep + second_block     # Pfad der Bilder, die als zweites erscheinen sollen&amp;#10;&amp;#10;'''&amp;#10;3. Auslesen der Pfade zu den Bilddateien und Erstellen der Liste mit relativen Pfaden, natürlich sortiert&amp;#10;&amp;#10;'''&amp;#10;&amp;#10;img_files_1 = glob.glob(img_path_1 + os.sep + '*.jpg')  # Erstellt Liste mit Pfaden zu den Bildern, die im 1. Block gezeigt werden&amp;#10;                                                        # (easy oder hard, abhängig von Gruppenzugehörigkeit)&amp;#10;img_files_2 = glob.glob(img_path_2 + os.sep + '*.jpg')  # Liste mit Pfaden zu den Bildern, die im 2. Block gezeigt werden&amp;#10;&amp;#10;&amp;#10;# Anlegen zweier Listen für relative Pfade. Die Elemente der Listen werden separat natürlich sortiert,&amp;#10;# bevor sie in eine einzelne Liste zusammengeführt werden&amp;#10;img_files_rel_1 = []&amp;#10;img_files_rel_2 = []&amp;#10;&amp;#10;# Eigentliches Auslesen der relativen Pfade (Liste der Bilder, die im 1. Block gezeigt werden sollen)&amp;#10;for img in img_files_1:&amp;#10;    img_split = img.split(os.sep)   # trennt die Strings an den Stellen, wo der OS Seperator (Windows: \\) vorliegt&amp;#10;    img_joined = os.sep.join(img_split[-3:])    # fügt die letzten 3 Elemente (Stimuli_3D, easy (oder hard), Filename.jpg zusammen&amp;#10;    img_files_rel_1.append(img_joined)     # fügt den relativen Pfad der img_files_complete-Liste hinzu&amp;#10;&amp;#10;# Eigentliches Auslesen der relativen Pfade (Liste der Bilder, die im 2. Block gezeigt werden sollen)&amp;#10;for img in img_files_2:&amp;#10;    img_split = img.split(os.sep)&amp;#10;    img_joined = os.sep.join(img_split[-3:])&amp;#10;    img_files_rel_2.append(img_joined)&amp;#10;&amp;#10;# Natural sorting der Listen unter Verwendung der custom Function&amp;#10;img_files_rel_1_sorted = natural_sorted(img_files_rel_1)&amp;#10;img_files_rel_2_sorted = natural_sorted(img_files_rel_2)&amp;#10;&amp;#10;# Zusammenführen (&quot;Concatenation&quot;) der Listen&amp;#10;# Diese enthält nun alle 2x192 = 384 relativen Pfade zu den Stimuli in der Art, dass&amp;#10;# für Gruppe A zunächst alle Pfade der Bilder im easy-Ordner, dann alle Pfade der Bilder &amp;#10;# im hard-Ordner folgen. Für Gruppe B verhält es sich entsprechend umgekehrt.&amp;#10;img_files_complete = [*img_files_rel_1_sorted, *img_files_rel_2_sorted]&amp;#10;&amp;#10;# Festlegen der Answer-Keys&amp;#10;# Hier können die Tasten, mit denen deckungsgleiche und nicht deckungsgleiche&amp;#10;# Bilder angegeben werden sollen, festgelegt werden. Dies wird bei der&amp;#10;# Bewertung der Antwort (richtig oder falsch) unter End Routine in dieser&amp;#10;# Code Komponenten automatisch berücksichtigt&amp;#10;same_key = 'up'&amp;#10;diff_key = 'down'&amp;#10;&amp;#10;# Liste mit erlaubten Keys (die Keyboard-Komponente benötigt die&amp;#10;# erlaubten Keys als Liste. Man kann nicht einfach die Variablennamen&amp;#10;# eintragen)&amp;#10;allowed_keys = [same_key, diff_key]&amp;#10;&amp;#10;# Liste mit 0 für korrekte und 1 für falsche Antworten&amp;#10;# Wird unter End Routine dieser Code Komponente verwendet&amp;#10;correct_keys = []" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="import * as os from 'os';&amp;#10;import * as sys from 'sys';&amp;#10;import * as glob from 'glob';&amp;#10;import * as re from 're';&amp;#10;var allowed_keys, correct_keys, diff_key, exp_root_path, first_block, img_files_1, img_files_2, img_files_complete, img_files_rel_1, img_files_rel_1_sorted, img_files_rel_2, img_files_rel_2_sorted, img_joined, img_path_1, img_path_2, img_split, same_key, second_block;&amp;#10;function natural_sorted(iterable, key = null, reverse = false) {&amp;#10;    /*Return a new naturally sorted list from the items in *iterable*.&amp;#10;&amp;#10;    The returned list is in natural sort order. The string is ordered&amp;#10;    lexicographically (using the Unicode code point number to order individual&amp;#10;    characters), except that multi-digit numbers are ordered as a single&amp;#10;    character.&amp;#10;&amp;#10;    Has two optional arguments which must be specified as keyword arguments.&amp;#10;&amp;#10;    *key* specifies a function of one argument that is used to extract a&amp;#10;    comparison key from each list element: ``key=str.lower``.  The default value&amp;#10;    is ``None`` (compare the elements directly).&amp;#10;&amp;#10;    *reverse* is a boolean value.  If set to ``True``, then the list elements are&amp;#10;    sorted as if each comparison were reversed.&amp;#10;&amp;#10;    The :func:`natural_sorted` function is guaranteed to be stable. A sort is&amp;#10;    stable if it guarantees not to change the relative order of elements that&amp;#10;    compare equal --- this is helpful for sorting in multiple passes (for&amp;#10;    example, sort by department, then by salary grade).&amp;#10;    */&amp;#10;    var prog;&amp;#10;    prog = re.compile(&quot;(\\d+)&quot;);&amp;#10;    function alphanum_key(element) {&amp;#10;        /* Split given key in list of strings and digits */&amp;#10;        return function () {&amp;#10;    var _pj_a = [], _pj_b = prog.split((key ? key(element) : element));&amp;#10;    for (var _pj_c = 0, _pj_d = _pj_b.length; (_pj_c &lt; _pj_d); _pj_c += 1) {&amp;#10;        var c = _pj_b[_pj_c];&amp;#10;        _pj_a.push((c.isdigit() ? Number.parseInt(c) : c));&amp;#10;    }&amp;#10;    return _pj_a;&amp;#10;}&amp;#10;.call(this);&amp;#10;    }&amp;#10;    return sorted(iterable, {&quot;key&quot;: alphanum_key, &quot;reverse&quot;: reverse});&amp;#10;}&amp;#10;/*&amp;#10;1. Pfad des Experimentes / aktuellen Python-Skriptes auslesen&amp;#10;Grund: wenn das Experiment auf anderen Rechnern ausgeführt wird,&amp;#10;wäre ein Hardcoden des Pfades zum Experiment (z.B. der Pfad&amp;#10;auf _meinem_ PC unklug, da es auf anderem PC zu Fehler käme)&amp;#10;&amp;#10;Erläuterung des Codes:&amp;#10;- sys.argv[0] ist der Name des Skriptes&amp;#10;- os.path.realpath(&lt;path&gt;) wandelt Argument in kanonischen Pfad (&quot;kürzester Pfad i.S.v. Stringlänge&quot;&amp;#10;bzw. Pfad ohne symbolische Links, Abkürzungen wie /./../ um&quot;), sodass der Pfad eindeutig&amp;#10;und unique ist -&gt; Output ist der kanonische Pfad der Scriptdatei&amp;#10;- os.path.dirname(&lt;path&gt;) gibt den Pfad der Inputdatei oder des Input-Directory (in Form einer Pfades&amp;#10;übergeben) aus -&gt; Output ist der Pfad der Scriptdatei sys.argv[0]*/&amp;#10;exp_root_path = os.path.dirname(os.path.realpath(sys.argv[0]));&amp;#10;/*&amp;#10;2. Abhängig vom aktuellen Block (und somit auch Gruppenzugehörigkeit, da Blockreihenfolge für Gruppe A&amp;#10;und B unterschiedlich) wird das Verzeichnis der zu verwendenden Bilder dynamisch festgelegt.&amp;#10;&amp;#10;Erläuterungen:&amp;#10;abhängig von der verwendeten Conditions-File steht in der Conditions-Spalte in Zeile 1 easy (Gruppe A) oder&amp;#10;hard (Gruppe B). Für Gruppe A enthält ist Conditions[0] somit easy, für Gruppe B hard. Conditions[1] ist für&amp;#10;Gruppe A hard, für Gruppe B easy.&amp;#10;Zu Beginn des 3D-Taskes soll eine Liste mit den relativen Pfaden (relativ zu Root-Dir des Experimentes)&amp;#10;zu ALLEN Bildern, die in der jeweiligen Gruppe verwendet werden, in der entsprechenden Reihenfolge&amp;#10;erstellt werden. Durch einen Trialindex wird dann innerhalb der Image-Komponente der trial_3D-Routine auf&amp;#10;das entsprechende Bild zugegriffen, wobei das Bild selbst während der Fixations geladen wird.*/&amp;#10;if ((expInfo[&quot;group&quot;] === &quot;A&quot;)) {&amp;#10;    first_block = &quot;Stimuli_3D\\easy&quot;;&amp;#10;    second_block = &quot;Stimuli_3D\\hard&quot;;&amp;#10;} else {&amp;#10;    if ((expInfo[&quot;group&quot;] === &quot;B&quot;)) {&amp;#10;        first_block = &quot;Stimuli_3D\\hard&quot;;&amp;#10;        second_block = &quot;Stimuli_3D\\easy&quot;;&amp;#10;    }&amp;#10;}&amp;#10;img_path_1 = ((exp_root_path + os.sep) + first_block);&amp;#10;img_path_2 = ((exp_root_path + os.sep) + second_block);&amp;#10;/*&amp;#10;3. Auslesen der Pfade zu den Bilddateien und Erstellen der Liste mit relativen Pfaden, natürlich sortiert&amp;#10;*/&amp;#10;img_files_1 = glob.glob(((img_path_1 + os.sep) + &quot;*.jpg&quot;));&amp;#10;img_files_2 = glob.glob(((img_path_2 + os.sep) + &quot;*.jpg&quot;));&amp;#10;img_files_rel_1 = [];&amp;#10;img_files_rel_2 = [];&amp;#10;for (var img, _pj_c = 0, _pj_a = img_files_1, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    img = _pj_a[_pj_c];&amp;#10;    img_split = img.split(os.sep);&amp;#10;    img_joined = os.sep.join(img_split.slice((- 3)));&amp;#10;    img_files_rel_1.push(img_joined);&amp;#10;}&amp;#10;for (var img, _pj_c = 0, _pj_a = img_files_2, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    img = _pj_a[_pj_c];&amp;#10;    img_split = img.split(os.sep);&amp;#10;    img_joined = os.sep.join(img_split.slice((- 3)));&amp;#10;    img_files_rel_2.push(img_joined);&amp;#10;}&amp;#10;img_files_rel_1_sorted = natural_sorted(img_files_rel_1);&amp;#10;img_files_rel_2_sorted = natural_sorted(img_files_rel_2);&amp;#10;img_files_complete = [...img_files_rel_1_sorted, ...img_files_rel_2_sorted];&amp;#10;same_key = &quot;up&quot;;&amp;#10;diff_key = &quot;down&quot;;&amp;#10;allowed_keys = [same_key, diff_key];&amp;#10;correct_keys = [];&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;/*&amp;#10;Überprüfen der Antworttaste der VP auf Richtigkeit.&amp;#10;Für den Fall, dass die Bilder des 3D Task randomisiert&amp;#10;bzw. geshuffelt präsentiert werden sollen, erfolgt der&amp;#10;Check nicht anhand einer Liste mit alternierend up und down&amp;#10;Einträgen. Stattdessen wird auf ein großes R im relativen&amp;#10;Pfad des im aktuellen Trial verwendeten Stimulus geprüft.&amp;#10;Wenn der relative Pfad ein R einhält, handelt es sich um einen&amp;#10;Trial mit nicht deckungsgleichen Bildern, weshalb dann die&amp;#10;diff_key-Taste (default: 'down') die korrekte Antwort ist und eine&amp;#10;1 geloggt wird.&amp;#10;Wird die same_key-Taste gedrückt, war es eine falsche Antwort und&amp;#10;es wird die 0 geloggt.&amp;#10;Umgekehrt verhält es sich mit der Zuordnung in den Trials mit deckungsgleichen&amp;#10;Stimuli. Hier ist der same_key (default: 'up') die korrekte Antwort,&amp;#10;weshalb bei Druck dieser Taste eine 1 geloggt wird.*/&amp;#10;if (_pj.in_es6(&quot;R&quot;, img_files_complete[trials_3D.thisN])) {&amp;#10;    if ((key_resp_3D.keys === diff_key)) {&amp;#10;        corrAns = 1;&amp;#10;    } else {&amp;#10;        corrAns = 0;&amp;#10;    }&amp;#10;} else {&amp;#10;    if ((key_resp_3D.keys === same_key)) {&amp;#10;        corrAns = 1;&amp;#10;    } else {&amp;#10;        corrAns = 0;&amp;#10;    }&amp;#10;}&amp;#10;psychoJS.experiment.addData(&quot;corrAns&quot;, corrAns);&amp;#10;psychoJS.experiment.addData(&quot;stim_path&quot;, img_files_complete[trials_3D.thisN]);&amp;#10;correct_keys.push(corrAns);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="'''&amp;#10;Überprüfen der Antworttaste der VP auf Richtigkeit.&amp;#10;Für den Fall, dass die Bilder des 3D Task randomisiert&amp;#10;bzw. geshuffelt präsentiert werden sollen, erfolgt der&amp;#10;Check nicht anhand einer Liste mit alternierend up und down&amp;#10;Einträgen. Stattdessen wird auf ein großes R im relativen&amp;#10;Pfad des im aktuellen Trial verwendeten Stimulus geprüft.&amp;#10;Wenn der relative Pfad ein R einhält, handelt es sich um einen&amp;#10;Trial mit nicht deckungsgleichen Bildern, weshalb dann die&amp;#10;diff_key-Taste (default: 'down') die korrekte Antwort ist und eine&amp;#10;1 geloggt wird.&amp;#10;Wird die same_key-Taste gedrückt, war es eine falsche Antwort und&amp;#10;es wird die 0 geloggt.&amp;#10;Umgekehrt verhält es sich mit der Zuordnung in den Trials mit deckungsgleichen&amp;#10;Stimuli. Hier ist der same_key (default: 'up') die korrekte Antwort,&amp;#10;weshalb bei Druck dieser Taste eine 1 geloggt wird.&amp;#10;'''&amp;#10;&amp;#10;if &quot;R&quot; in img_files_complete[trials_3D.thisN]:&amp;#10;    if key_resp_3D.keys == diff_key:&amp;#10;        corrAns = 1&amp;#10;    else:&amp;#10;        corrAns = 0&amp;#10;else:&amp;#10;    if key_resp_3D.keys == same_key:&amp;#10;        corrAns = 1&amp;#10;    else:&amp;#10;        corrAns = 0&amp;#10;&amp;#10;# Loggen des relativen Pfades des aktuellen Stimulus&amp;#10;# sowie der Richtigkeit der Antwort (werden in separate Spalten&amp;#10;# der Experimental-csv-Datei geschrieben)&amp;#10;thisExp.addData('corrAns', corrAns)&amp;#10;thisExp.addData('stim_path', img_files_complete[trials_3D.thisN])&amp;#10;&amp;#10;# Loggen der Antworten (diese Liste wird zur Berechnung der Anzahl korrekter Antworten&amp;#10;# in der feedback_code-Komponente der feedback_3D-Routine verwendet)&amp;#10;correct_keys.append(corrAns)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="trial_3D_code" valType="code"/>
      </CodeComponent>
      <ImageComponent name="stim_3D">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="10" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set during: ITI_Fixation_3D.fix_point_3D_ISI" val="$img_files_complete[trials_3D.thisN]" valType="file"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="" valType="str"/>
        <Param name="name" updates="None" val="stim_3D" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(800, 427)" valType="list"/>
        <Param name="startEstim" updates="None" val="0" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="10" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="num"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
      </ImageComponent>
      <KeyboardComponent name="key_resp_3D">
        <Param name="allowedKeys" updates="constant" val="allowed_keys" valType="list"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="10" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_3D" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="0" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="10" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="feedback_3D">
      <CodeComponent name="feedback_code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="# Festlegen, wie viele der letzten Trials bei Berechnung der korrekten&amp;#10;# Trials für Feedback-Message berücksichtigt werden sollen&amp;#10;# n_Trials_Feedback letzter Trials&amp;#10;# n_Trials_Feedback: Anzahl letzter Trials, die für Berechnung berücksichtigt&amp;#10;# werden sollen&amp;#10;n_Trials_Feedback = 10&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="n_Trials_Feedback = 10;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="if ((((trials_3D.thisN % n_Trials_Feedback) === 0) &amp;&amp; (trials_3D.thisN &gt; 0))) {&amp;#10;    nCorr = util.sum(correct_keys.slice((- n_Trials_Feedback)));&amp;#10;    msg = (((nCorr.toString() + &quot; der letzten &quot;) + n_Trials_Feedback.toString()) + &quot; korrekt.&quot;);&amp;#10;} else {&amp;#10;    msg = &quot;&quot;;&amp;#10;    continueRoutine = false;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# Anpassen der Feedback Message nach 10 Trials&amp;#10;# Falls kein Feedback angezeigt werden soll (da aktueller&amp;#10;# Trial kein Vielfaches von 10) UND der aktuelle Trial nicht der 1. ist&amp;#10;# , wird die Routine übersprungen und der nächste Trial startet.&amp;#10;# Der Check, ob es sich um den 1. Trial handelt, ist notwendig, da PsychoPy&amp;#10;# sonst im 1. Trial schon eine Feedback-Nachricht anzeigt&amp;#10;# (0 Modulo 10 = 0)&amp;#10;if trials_3D.thisN % n_Trials_Feedback == 0 and trials_3D.thisN &gt; 0:&amp;#10;    nCorr = sum(correct_keys[-n_Trials_Feedback:])&amp;#10;    msg = str(nCorr) + ' der letzten ' + str(n_Trials_Feedback) + ' korrekt.'&amp;#10;else:&amp;#10;    msg = ''&amp;#10;    continueRoutine = False&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="feedback_code" valType="code"/>
      </CodeComponent>
      <TextComponent name="feedback_text">
        <Param name="color" updates="constant" val="white" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="3" valType="code"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.2" valType="num"/>
        <Param name="name" updates="None" val="feedback_text" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="0" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="3" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$msg" valType="str"/>
        <Param name="units" updates="None" val="norm" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="num"/>
      </TextComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="instructions_2D"/>
    <LoopInitiator loopType="TrialHandler" name="trials_2D">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="15" valType="num"/>
      <Param name="name" updates="None" val="trials_2D" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="ITI_Fixation_2D"/>
    <Routine name="trial_2D"/>
    <LoopTerminator name="trials_2D"/>
    <Routine name="instructions_3D"/>
    <LoopInitiator loopType="TrialHandler" name="trials_3D">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="384" valType="num"/>
      <Param name="name" updates="None" val="trials_3D" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="ITI_Fixation_3D"/>
    <Routine name="trial_3D"/>
    <Routine name="feedback_3D"/>
    <LoopTerminator name="trials_3D"/>
  </Flow>
</PsychoPy2experiment>
